version: '3.8'

# Full stack compose file - everything runs in Docker
# Run with: docker compose -f docker-compose.full.yml up --build

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  postgres-mcp:
    image: crystaldba/postgres-mcp
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URI=postgresql://postgres:password@postgres:5432/orders_db
    command: ["--access-mode=unrestricted", "--transport=sse"]
    depends_on:
      - postgres
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.9.0
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=false
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Database connection (Docker internal)
      - DATABASE_URL=jdbc:postgresql://postgres:5432/orders_db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      # Kafka connection (Docker internal)
      - KAFKA_BROKER=kafka:9093
      # OpenTelemetry Java Agent Configuration
      - OTEL_SERVICE_NAME=order-service
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://otlp-gateway-prod-eu-west-2.grafana.net/otlp/v1/traces
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=https://otlp-gateway-prod-eu-west-2.grafana.net/otlp/v1/logs
      - OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic MTE5NzE2NzpnbGNfZXlKdklqb2lNVE0zTXpVM09DSXNJbTRpT2lKemRHRmpheTB4MVRrM01UWTNMVzkwYkhBdGQzSnBkR1V0YjNSc2NDMTBiMnRsYmkweUlpd2lheUk2SW1ad2FXMWplRUV3Tnprek9ERXplRFZ5YWpoMlpWa3lkeUlzSW0waU9uc2ljaUk2SW5CeWIyUXRaWFV0ZDJWemRDMHlJbjE5
      - OTEL_INSTRUMENTATION_SLF4J_LOGBACK_APPENDER_ENABLED=true
      - OTEL_LOGS_INCLUDE_TRACE_CONTEXT=true
      # Additional Spring Boot configuration for Docker
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped
    command: sh -c "sleep 15 && java -javaagent:opentelemetry-javaagent.jar -jar app.jar"

  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    environment:
      # Kafka connection (Docker internal)
      - KAFKA_BROKER=kafka:9093
      # Grafana Cloud credentials  
      - OTEL_AUTH_HEADER=Basic MTE5NzE2NzpnbGNfZXlKdmlqb2lNVE0zTXpVM09DSXNJbTRpT2lKemRHRmpheTB4MVRrM01UWTNMVzkwYkhBdGQzSnBkR1V0YjNSc2NDMTBiMnRsYmkweUlpd2lheUk2SW1ad2FXMWplRUV3Tnprek9ERXplRFZ5YWpoMlpWa3lkeUlzSW0waU9uc2ljaUk2SW5CeWIyUXRaWFV0ZDJWemRDMHlJbjE5
    depends_on:
      - kafka
    restart: unless-stopped
    command: sh -c "sleep 20 && ./inventory-service"

volumes:
  postgres_data:
